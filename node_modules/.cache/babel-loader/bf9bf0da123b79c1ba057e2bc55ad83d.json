{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flavo\\\\Downloads\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [employeeSelected, setEmployeeSelected] = useState(false);\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true); // const [transactions, setTransactions] = useState()\n\n  const transactions = () => {\n    var _paginatedTransaction;\n\n    if (employeeSelected && transactionsByEmployee) {\n      return transactionsByEmployee;\n    }\n\n    return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : null;\n  };\n\n  const loadAllTransactions = useCallback(async () => {\n    //fixed dropdown bug\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n    setEmployeeSelected(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setEmployeeSelected(true);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  useEffect(() => {\n    if ((paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) === null) {\n      setHasMoreTransactions(false);\n    } else {\n      setHasMoreTransactions(true);\n    }\n  }, [paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          if (newValue.id === '') {\n            setEmployeeSelected(false);\n            await loadAllTransactions();\n          } else {\n            setEmployeeSelected(true);\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), employeeSelected === false && transactions !== null && hasMoreTransactions === true && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Rampb\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+uH0Sr3u778RlIkrUtoUyq5sryY=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","employeeSelected","setEmployeeSelected","hasMoreTransactions","setHasMoreTransactions","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","nextPage","item","value","id","label","firstName","lastName","newValue"],"sources":["C:/Users/flavo/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [employeeSelected, setEmployeeSelected] = useState(false)\n  const [hasMoreTransactions, setHasMoreTransactions] = useState(true)\n  // const [transactions, setTransactions] = useState()\n\n\n  const transactions = () => {\n    if(employeeSelected && transactionsByEmployee){\n      return transactionsByEmployee;\n    }\n    return paginatedTransactions?.data ?? null;\n  }\n\n\n  const loadAllTransactions = useCallback(async () => {\n    //fixed dropdown bug\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    setIsLoading(false)\n\n   \n    await paginatedTransactionsUtils.fetchAll()\n    setEmployeeSelected(false)\n   \n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setEmployeeSelected(true)\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n      \n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n  \n\n  useEffect(() => {\n    if (paginatedTransactions?.nextPage === null){\n      setHasMoreTransactions(false)\n    }else{\n      setHasMoreTransactions(true)\n    }\n  },[paginatedTransactions?.nextPage])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            if(newValue.id === ''){\n              setEmployeeSelected(false)\n              await loadAllTransactions()\n            }else{\n              setEmployeeSelected(true)\n              await loadTransactionsByEmployee(newValue.id)\n            }        \n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {employeeSelected === false  && transactions !== null && hasMoreTransactions === true &&(\n            <button\n              className=\"Rampb\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
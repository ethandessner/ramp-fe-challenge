{"ast":null,"code":"import mockData from \"../mock-data.json\";\nimport { useEffect, useState } from \"react\";\nconst TRANSACTIONS_PER_PAGE = 5; // const data: { employees: Employee[]; transactions: Transaction[] } = {\n//   employees: mockData.employees,\n//   transactions: mockData.transactions,\n// }\n\nconst [data, setData] = useState({\n  employees: mockData.employees,\n  transactions: mockData.transactions\n});\nuseEffect(() => {\n  console.log(data);\n}, []);\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value; // setData({transactions: {...data.transactions, }, employees: data.employees})\n};","map":{"version":3,"names":["mockData","useEffect","useState","TRANSACTIONS_PER_PAGE","data","setData","employees","transactions","console","log","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["C:/Users/flavo/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\nimport { useEffect, useState } from \"react\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\n// const data: { employees: Employee[]; transactions: Transaction[] } = {\n//   employees: mockData.employees,\n//   transactions: mockData.transactions,\n// }\n\nconst [data, setData] = useState({\n    employees: mockData.employees,\n    transactions: mockData.transactions,\n  })\n\nuseEffect(() => {\n  console.log(data)\n},[])\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n\n  // setData({transactions: {...data.transactions, }, employees: data.employees})\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,qBAAqB,GAAG,CAA9B,C,CAEA;AACA;AACA;AACA;;AAEA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC;EAC7BI,SAAS,EAAEN,QAAQ,CAACM,SADS;EAE7BC,YAAY,EAAEP,QAAQ,CAACO;AAFM,CAAD,CAAhC;AAKAN,SAAS,CAAC,MAAM;EACdO,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACD,CAFQ,EAEP,EAFO,CAAT;AAIA,OAAO,MAAMM,YAAY,GAAG,MAAkBN,IAAI,CAACE,SAA5C;AAEP,OAAO,MAAMK,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGT,qBAArB;EACA,MAAMY,GAAG,GAAGD,KAAK,GAAGX,qBAApB;;EAEA,IAAIW,KAAK,GAAGV,IAAI,CAACG,YAAL,CAAkBS,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGX,IAAI,CAACG,YAAL,CAAkBS,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELb,IAAI,EAAEA,IAAI,CAACG,YAAL,CAAkBW,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAOT,IAAI,CAACG,YAAL,CAAkBc,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGlB,IAAI,CAACG,YAAL,CAAkBqB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAIA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDS,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB,CATsG,CAWtG;AACD,CAZM"},"metadata":{},"sourceType":"module"}